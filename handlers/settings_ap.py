from main import dp, db, send_message, bot
from config import wl, ADMIN_ID
from keyboards import admin_panel
from aiogram.filters import Command
from aiogram import types, F
from commands import set_commands

from states import UserState
from aiogram.fsm.context import FSMContext
from datetime import datetime, time
import pytz
import zipfile


async def is_work_time(start_time: str, end_time: str):
    now = pytz.timezone('Europe/Moscow').localize(datetime.now()).time()
    start = time.fromisoformat(start_time)
    end = time.fromisoformat(end_time)
    return any([now <= end, now >= start]) if not start < end else (start <= now <= end)


@dp.message(Command('ap'))
async def settings_newsletter(msg: types.Message):
    if msg.from_user.id in ADMIN_ID:
        await set_commands(bot)

        delete = await db.get_delete()
        launch = await db.get_launched()

        if delete[0] == 1:
            admin_panel.inline_keyboard[2][0].text = "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üü¢"
        else:
            admin_panel.inline_keyboard[2][0].text = "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üî¥"

        if launch[0] == 1:
            admin_panel.inline_keyboard[4][0].text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
        else:
            admin_panel.inline_keyboard[4][0].text = "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
        await msg.answer("–π–æ—É", reply_markup=admin_panel)


# time to start
@dp.callback_query(F.data.startswith('time_to_start'))
async def set_start(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id in ADMIN_ID:
        await call.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
#         start = await db.get_start()
#         if start[0] != '0':
#             await call.message.answer(
#                 f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: <b>{start}<b>\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ\n<i>(23:10, 21:45, 00:15, ...)</i>", )
#         else:
#             await call.message.answer(
#                 f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n–û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ\n<i>(23:10, 21:45, 00:15, ...)</i>", )
#         await state.set_state(UserState.wait_start)
#
#
# @dp.message(UserState.wait_start)
# async def set_start2(msg: types.Message, state: FSMContext):
#     await db.set_start(msg.text)
#     start = await db.get_start()
#     await msg.answer(f"–û—Ç–ª–∏—á–Ω–æ!\n–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –≤ {start}")
#     await state.clear()


# Start newsletter
@dp.callback_query(F.data.startswith('start'))
async def start(call: types.CallbackQuery):
    launched = await db.get_launched()
    if call.from_user.id in ADMIN_ID and launched[0] == 0:
        delete = await db.get_delete()
        if delete[0] == 0:
            admin_panel.inline_keyboard[2][0].text = "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üî¥"
        else:
            admin_panel.inline_keyboard[2][0].text = "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üü¢"
        admin_panel.inline_keyboard[4][0].text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
        await call.message.edit_reply_markup(reply_markup=admin_panel)
        await db.set_launched(1)
        await send_message()
    else:
        delete = await db.get_delete()
        if delete[0] == 0:
            admin_panel.inline_keyboard[2][0].text = "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üî¥"
        else:
            admin_panel.inline_keyboard[2][0].text = "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üü¢"
        admin_panel.inline_keyboard[4][0].text = "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
        await call.message.edit_reply_markup(reply_markup=admin_panel)
        await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!")
        await db.set_launched(0)


# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data.startswith('mailing_period'))
async def mailing_period(call: types.CallbackQuery, state: FSMContext):
    period = await db.get_period()
    await call.message.answer(
        f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥: <b>{period[0]}</b> —Å–µ–∫. ({round(int(period[0]) / 60, 1)} –º–∏–Ω.)\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ <b>–°–ï–ö–£–ù–î–ê–•</b>", )
    await state.set_state(UserState.wait_send_seconds)


@dp.message(UserState.wait_send_seconds)
async def mailing_period_2(msg: types.Message, state: FSMContext):
    try:
        await db.set_period(msg.text)
        await msg.answer(f"–ü–µ—Ä–∏–æ–¥ –≤ <b>{msg.text}</b> —Å–µ–∫. —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ =(")
    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ
@dp.callback_query(F.data.startswith('delete'))
async def stop_func(call: types.CallbackQuery):
    delete = await db.get_delete()
    launch = await db.get_launched()
    if launch[0] == 1:
        await call.answer(text="–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞!")
    else:
        if delete[0] == 0:
            await db.set_delete(1)
            admin_panel.inline_keyboard[2][0].text = "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üü¢"
            await call.message.edit_reply_markup(reply_markup=admin_panel)
            await call.answer("–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –≤–∫–ª—é—á–µ–Ω–æ!")
        else:
            await db.set_delete(0)
            admin_panel.inline_keyboard[2][0].text = "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üî¥"
            await call.message.edit_reply_markup(reply_markup=admin_panel)
            await call.answer("–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ!")


# –î–æ–±–∞–≤–∏—Ç—å –≤ WL
@dp.callback_query(F.data.startswith('add_wl'))
async def add_wl(call: types.CallbackQuery, state: FSMContext):
    wl = []
    white_list = await db.get_wl()
    for lists in white_list:
        wl.append(lists[0])
    await call.message.answer(
        f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ —Å—Å—ã–ª–∫–∏:\n{wl}\n–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –µ–µ –¥–æ–±–∞–≤–∏—Ç—å", disable_web_page_preview=True)
    await state.set_state(UserState.wait_link)


@dp.message(UserState.wait_link)
async def add_wl2(msg: types.Message, state: FSMContext):
    try:
        await db.set_wl(msg.text)
        wl = []
        white_list = await db.get_wl()
        for lists in white_list:
            wl.append(lists[0])
        await msg.answer(f"–°—Å—ã–ª–∫–∞ '<b>{msg.text}</b>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!!!\n–¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n{wl}",
                         disable_web_page_preview=True)
    except:
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ =(")
    await state.clear()


# –£–¥–∞–ª–∏—Ç—å –∏–∑ WL
@dp.callback_query(F.data.startswith('del_wl'))
async def del_wl(call: types.CallbackQuery, state: FSMContext):
    wl = []
    white_list = await db.get_wl()
    for lists in white_list:
        wl.append(lists[0])
    await call.message.answer(
        f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ —Å—Å—ã–ª–∫–∏:\n{wl}\n–û—Ç–ø—Ä–∞–≤—å <b>—Å—Å—ã–ª–∫—É</b>, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
        disable_web_page_preview=True)
    await state.set_state(UserState.wait_index)


@dp.message(UserState.wait_index)
async def del_wl2(msg: types.Message, state: FSMContext):
    try:
        await db.del_wl(msg.text)
        wl = []
        white_list = await db.get_wl()
        for lists in white_list:
            wl.append(lists[0])
        await msg.answer(f"–°—Å—ã–ª–∫–∞ '<b>{msg.text}</b>' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!!!\n\n–¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n{wl}",
                         disable_web_page_preview=True)
    except:
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ =(")
    await state.clear()


# –í–æ —Å–∫–æ–ª—å–∫–æ —Å–ø–∞—Ç—å?
@dp.callback_query(F.data.startswith('time_to_sleep'))
async def sleep(call: types.CallbackQuery, state: FSMContext):
    time_to_sleep = await db.get_sleep()
    await call.message.answer(
        f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —É—Ö–æ–¥–∏—Ç —Å–ø–∞—Ç—å –≤ <b>{time_to_sleep[0]}</b>\n–û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω —É–π—Ç–∏ —Å–ø–∞—Ç—å\n(23:10, 21:45, 00:15, ...)")
    await state.set_state(UserState.wait_sleep)


@dp.message(UserState.wait_sleep)
async def sleep2(msg: types.Message, state: FSMContext):
    await db.set_sleep(msg.text)
    await msg.answer(f"–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –±–æ—Ç —É—Ö–æ–¥–∏—Ç —Å–ø–∞—Ç—å –≤ <b>{msg.text}</b>")
    await state.clear()


# –í–æ —Å–∫–æ–ª—å–∫–æ –≤—Å—Ç–∞–≤–∞—Ç—å?
@dp.callback_query(F.data.startswith('time_to_up'))
async def up(call: types.CallbackQuery, state: FSMContext):
    time_to_up = await db.get_up()
    await call.message.answer(
        f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –≤ <b>{time_to_up[0]}</b>\n–û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è\n(08:00, 08:30, 09:15, ...)")
    await state.set_state(UserState.wait_up)


@dp.message(UserState.wait_up)
async def up2(msg: types.Message, state: FSMContext):
    await db.set_up(msg.text)
    await msg.answer(f"–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –±–æ—Ç –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –≤ <b>{msg.text}</b>")
    await state.clear()
